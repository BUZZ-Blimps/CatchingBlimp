name: Manage Milestones

on:
  [push]

jobs:
  manage-milestones:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install @octokit/core

      - name: Run milestone management script
        env:
          GH_TOKEN: ${{ secrets.RUNNER_TOKEN }}
        run: |
          node -e "
          const { Octokit } = require('@octokit/core');
          const octokit = new Octokit({ auth: process.env.GH_TOKEN });

          const owner = 'SWAMP-Blimps';
          const repo = 'CatchingBlimp';

          async function manageMilestones() {
            // Fetch all milestones
            const milestones = await octokit.request('GET /repos/{owner}/{repo}/milestones', { owner, repo });

            // Delete completed milestones
            for (const milestone of milestones.data) {
              if (milestone.open_issues === 0 && milestone.closed_issues > 0) {
                await octokit.request('DELETE /repos/{owner}/{repo}/milestones/{milestone_number}', {
                  owner,
                  repo,
                  milestone_number: milestone.number
                });
                console.log(`Deleted milestone: ${milestone.title}`);
              }
            }

            // Create new milestone for 2 weeks from today
            const today = new Date();
            const newMilestoneDate = new Date(today);
            newMilestoneDate.setDate(today.getDate() + 14);

            const month = String(newMilestoneDate.getMonth() + 1).padStart(2, '0');
            const day = String(newMilestoneDate.getDate()).padStart(2, '0');
            const year = String(newMilestoneDate.getFullYear()).slice(-2);

            const newMilestoneTitle = `${month}-${day}-${year}`;

            await octokit.request('POST /repos/{owner}/{repo}/milestones', {
              owner,
              repo,
              title: newMilestoneTitle,
              due_on: newMilestoneDate.toISOString()
            });

            console.log(`Created new milestone: ${newMilestoneTitle}`);
          }

          manageMilestones().catch(err => {
            console.error('Error managing milestones:', err);
            process.exit(1);
          });
          "
